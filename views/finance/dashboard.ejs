<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Finance Dashboard</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <%- include("../layouts/layout.ejs") %>
    <style>
        body {
            background-color: #f8f9fa;
            font-family: 'Poppins', sans-serif;
        }
        .container {
            max-width: 1750px;
            background: #ffffff;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
            margin-top: 20px;
        }
        .card {
            margin-bottom: 20px;
            border-radius: 10px;
        }
        canvas {
            width: 100% !important;
            height: auto !important;
        }
        .horizontal-cards .card {
            margin-right: 20px;
        }
        .horizontal-cards {
            display: flex;
            justify-content: space-between;
            align-items: center;
            gap: 20px;
        }
        .horizontal-cards .card-body {
            padding: 20px;
        }
        .card-header {
            font-size: 18px;
            font-weight: bold;
        }
        .btn {
            font-size: 14px;
        }
        .table-wrapper {
            max-height: 400px;
            overflow-y: auto;
        }
        /* Responsive Design */
        @media (max-width: 768px) {
            .horizontal-cards .card {
                width: 100%;
            }
            .col-md-5, .col-md-7 {
                width: 100%;
            }
            .col-md-8, .col-md-4 {
                width: 100%;
            }
        }
    </style>
    <%- include("../layouts/layout.ejs") %>
    
</head>
<body>

    <% layout("/layouts/boilerplate")%>
    <div class="container">
    <h2 class="text-center mb-4">Finance Dashboard</h2>

    <!-- Horizontal Cards for Budget, Expenses, Income -->
    <div class="horizontal-cards mb-4" style="display: flex; gap: 16px;">
        <!-- Budget Card -->
        <div class="card text-white bg-info" style="flex: 1; color: rgb(254, 125, 125);">
            <div class="card-body">
                <h5 class="card-title">Budget</h5>
                <p class="card-text" id="budgetAmount">₹<%= budget %></p>
                <a href="/finance/set-budget" class="btn btn-secondary w-100 mb-3" id="setBudgetBtn">Set Budget</a>
            </div>
        </div>

        <!-- Expenses Card -->
        <div class="card text-white bg-danger" style="flex: 1;">
            <div class="card-body">
                <h5 class="card-title">Expenses</h5>
                <p class="card-text" id="expensesAmount">₹<%= expenses.reduce((sum, expense) => sum + expense.amount, 0) %></p>
                <a href="/finance/add-expense" class="btn btn-primary w-100 mb-3" id="addTransactionBtn">Add Transaction</a>
            </div>
        </div>

        <!-- Income Card -->
        <div class="card text-white bg-success" style="flex: 1;">
            <div class="card-body">
                <h5 class="card-title">Income</h5>
                <p class="card-text" id="incomeAmount">₹<%= income.reduce((sum, inc) => sum + inc.amount, 0) %></p>
                <a href="/finance/add-income" class="btn btn-secondary w-100" id="addIncomeBtn">Add Income</a>
            </div>
        </div>
    </div>
</div>


        <div class="row m-4">
            <!-- Expense Breakdown and Expense List (Side by Side) -->
            <div class="col-md-4">
                <div class="card">
                    <h5 class="card-header">Expense Breakdown</h5>
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center">
                            <div class="mr-3">
                                <label for="breakdownYear" class="d-block">Select Year:</label>
                                <input type="number" id="breakdownYear" class="form-control" value="2025" min="2000" max="2100">
                            </div>
                            <div class="mr-3">
                                <label for="breakdownMonth" class="d-block">Select Month (Optional):</label>
                                <select id="breakdownMonth" class="form-control">
                                    <option value="">All Months</option>
                                    <option value="0">January</option>
                                    <option value="1">February</option>
                                    <option value="2">March</option>
                                    <option value="3">April</option>
                                    <option value="4">May</option>
                                    <option value="5">June</option>
                                    <option value="6">July</option>
                                    <option value="7">August</option>
                                    <option value="8">September</option>
                                    <option value="9">October</option>
                                    <option value="10">November</option>
                                    <option value="11">December</option>
                                </select>
                            </div>
                            <button class="btn btn-primary" id="updateExpenseBreakdown">Update Breakdown</button>
                        </div>
                        <br>
                        <canvas id="expenseBreakdownChart" style="height: 100px;"></canvas>
                    </div>
                </div>
            </div>
        
            <!-- All Expenses Transactions -->
            <div class="col-md-8">
                <div class="card">
                    <h5 class="card-header">All Expenses Transactions</h5>
                    <div class="card-body">
                        <!-- Filter Section -->
                        <div class="d-flex justify-content-between align-items-center mb-4">
                            <div>
                                <label for="startDate" class="d-block">Start Date:</label>
                                <input type="date" id="startDate" class="form-control">
                            </div>
                            <div>
                                <label for="endDate" class="d-block">End Date:</label>
                                <input type="date" id="endDate" class="form-control">
                            </div>
                            <button class="btn btn-primary" id="filterDates">Filter</button>
                        </div>
            
                        <div class="table-wrapper">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>Date</th>
                                        <th>Category</th>
                                        <th>Amount</th>
                                    </tr>
                                </thead>
                                <tbody id="expenseTableBody">
                                    <% expenses.forEach(function(expense) { %>
                                        <tr>
                                            <td><%= expense.date %></td>
                                            <td><%= expense.category %></td>
                                            <td>₹<%= expense.amount %></td>
                                        </tr>
                                    <% }) %>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
            
        </div>
        
        <div class="row mt-4">
            <!-- All Income Transactions -->
            <div class="col-md-6">
                <div class="card">
                    <h5 class="card-header">All Income Transactions</h5>
                    <div class="card-body">
                        <!-- Filter Section -->
                        <div class="d-flex justify-content-between align-items-center mb-4">
                            <div>
                                <label for="incomeStartDate" class="d-block">Start Date:</label>
                                <input type="date" id="incomeStartDate" class="form-control">
                            </div>
                            <div>
                                <label for="incomeEndDate" class="d-block">End Date:</label>
                                <input type="date" id="incomeEndDate" class="form-control">
                            </div>
                            <button class="btn btn-primary" id="filterIncomeDates">Filter</button>
                        </div>
            
                        <div class="table-wrapper">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>Date</th>
                                        <th>Source</th>
                                        <th>Amount</th>
                                    </tr>
                                </thead>
                                <tbody id="incomeTableBody">
                                    <% income.forEach(function(inc) { %>
                                        <tr>
                                            <td><%= inc.date %></td>
                                            <td><%= inc.source %></td>
                                            <td>₹<%= inc.amount %></td>
                                        </tr>
                                    <% }) %>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
            
        
            <!-- Income Graph -->
            <div class="col-md-6">
                <div class="card">
                    <h5 class="card-header">Income Graph</h5>
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center">
                            <div class="mr-3">
                                <label for="incomeChartType" class="d-block">Chart Type:</label>
                                <select id="incomeChartType" class="form-control">
                                    <option value="monthly">Monthly</option>
                                    <option value="annual">Annual</option>
                                </select>
                            </div>
                            <div class="mr-3">
                                <label for="incomeYear" class="d-block">Select Year:</label>
                                <input type="number" id="incomeYear" class="form-control" value="2025" min="2000" max="2100">
                            </div>
                            <button class="btn btn-primary" id="updateIncomeChart">Update Chart</button>
                        </div>
                        <br>
                        <!-- Income Graph Canvas -->
                        <canvas id="incomeGraph"></canvas>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="row mt-4">
            <!-- Expense Chart -->
            <div class="col-md-6">
                <div class="card">
                    <h5 class="card-header">Expense Chart</h5>
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center">
                            <div class="mr-3">
                                <label for="expenseChartType" class="d-block">Chart Type:</label>
                                <select id="expenseChartType" class="form-control">
                                    <option value="monthly">Monthly</option>
                                    <option value="annual">Annual</option>
                                </select>
                            </div>
                            <div class="mr-3">
                                <label for="expenseYear" class="d-block">Select Year:</label>
                                <input type="number" id="expenseYear" class="form-control" value="2025" min="2000" max="2100">
                            </div>
                            <button class="btn btn-primary" id="updateExpenseChart">Update Chart</button>
                        </div>
                        <br>
                        <!-- Expense Chart Canvas -->
                        <canvas id="expenseChart"></canvas>
                    </div>
                </div>
            </div>
        
            <!-- Income vs Expense Chart -->
            <div class="col-md-6">
                <div class="card">
                    <h5 class="card-header">Income vs Expense Chart</h5>
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center">
                            <div class="mr-3">
                                <label for="comparisonChartType" class="d-block">Chart Type:</label>
                                <select id="comparisonChartType" class="form-control">
                                    <option value="monthly">Monthly</option>
                                    <option value="annual">Annual</option>
                                </select>
                            </div>
                            <div class="mr-3">
                                <label for="comparisonYear" class="d-block">Select Year:</label>
                                <input type="number" id="comparisonYear" class="form-control" value="2025" min="2000" max="2100">
                            </div>
                            <button class="btn btn-primary" id="updateComparisonChart">Update Chart</button>
                        </div>
                        <br>
                        <!-- Income vs Expense Graph Canvas -->
                        <canvas id="incomeVsExpenseChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
        
    
    
    <script>
        const expenses = <%- JSON.stringify(expenses) %>;
        const income = <%- JSON.stringify(income) %>;
    
        let incomeChart, expenseChart, expenseBreakdownChart, incomeVsExpenseChart;
    
        function generateCharts(chartId, type = 'monthly', selectedYear = 2025, selectedMonth = null) {
            const filteredExpenses = expenses.filter(entry => {
                const entryDate = new Date(entry.date);
                return entryDate.getFullYear() === selectedYear && (selectedMonth === null || entryDate.getMonth() === selectedMonth);
            });
    
            const filteredIncome = income.filter(entry => {
                const entryDate = new Date(entry.date);
                return entryDate.getFullYear() === selectedYear && (selectedMonth === null || entryDate.getMonth() === selectedMonth);
            });
    
            const expenseData = Array(12).fill(0);
            const incomeData = Array(12).fill(0);
            const expenseCategoryData = {};
    
            if (type === 'monthly') {
                filteredExpenses.forEach(entry => {
                    const month = new Date(entry.date).getMonth();
                    expenseData[month] += entry.amount;
    
                    if (!expenseCategoryData[entry.category]) {
                        expenseCategoryData[entry.category] = 0;
                    }
                    expenseCategoryData[entry.category] += entry.amount;
                });
    
                filteredIncome.forEach(entry => {
                    const month = new Date(entry.date).getMonth();
                    incomeData[month] += entry.amount;
                });
            } else {
                const totalExpenses = filteredExpenses.reduce((sum, entry) => sum + entry.amount, 0);
                const totalIncome = filteredIncome.reduce((sum, entry) => sum + entry.amount, 0);
    
                expenseData[0] = totalExpenses;
                incomeData[0] = totalIncome;
            }
    
            const labels = type === 'monthly' ? ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"] : [selectedYear.toString()];
    
            switch (chartId) {
                case 'income':
                    if (incomeChart) incomeChart.destroy();
                    incomeChart = new Chart(document.getElementById("incomeGraph"), {
                        type: "line",
                        data: {
                            labels: labels,
                            datasets: [{
                                label: "Income (₹)",
                                data: incomeData,
                                borderColor: "#28a745",
                                backgroundColor: "rgba(40,167,69,0.1)",
                                fill: true
                            }]
                        }
                    });
                    break;
                case 'expense':
                    if (expenseChart) expenseChart.destroy();
                    expenseChart = new Chart(document.getElementById("expenseChart"), {
                        type: "bar",
                        data: {
                            labels: labels,
                            datasets: [{
                                label: "Expenses (₹)",
                                data: expenseData,
                                backgroundColor: "#dc3545"
                            }]
                        }
                    });
                    break;
                case 'comparison':
                    if (incomeVsExpenseChart) incomeVsExpenseChart.destroy();
                    incomeVsExpenseChart = new Chart(document.getElementById("incomeVsExpenseChart"), {
                        type: "line",
                        data: {
                            labels: labels,
                            datasets: [
                                { label: "Income (₹)", data: incomeData, borderColor: "#28a745" },
                                { label: "Expenses (₹)", data: expenseData, borderColor: "#dc3545" }
                            ]
                        }
                    });
                    break;
                case 'breakdown':
                    const expenseCategoryLabels = Object.keys(expenseCategoryData);
                    const expenseCategoryValues = Object.values(expenseCategoryData);
                    if (expenseBreakdownChart) expenseBreakdownChart.destroy();
                    expenseBreakdownChart = new Chart(document.getElementById("expenseBreakdownChart"), {
                        type: "pie",
                        data: {
                            labels: expenseCategoryLabels,
                            datasets: [{
                                label: "Expense Breakdown",
                                data: expenseCategoryValues,
                                backgroundColor: ["#007bff", "#dc3545", "#ffc107", "#28a745", "#17a2b8"]
                            }]
                        }
                    });
                    break;
            }
        }

        

        window.onload = function() {
        generateCharts('income', 'monthly', 2025);
        generateCharts('expense', 'monthly', 2025);
        generateCharts('comparison', 'monthly', 2025);
        generateCharts('breakdown', 'monthly', 2025);
    };

    
        document.getElementById('updateIncomeChart').addEventListener('click', () => generateCharts('income', document.getElementById('incomeChartType').value, parseInt(document.getElementById('incomeYear').value)));
        document.getElementById('updateExpenseChart').addEventListener('click', () => generateCharts('expense', document.getElementById('expenseChartType').value, parseInt(document.getElementById('expenseYear').value)));
        document.getElementById('updateComparisonChart').addEventListener('click', () => generateCharts('comparison', document.getElementById('comparisonChartType').value, parseInt(document.getElementById('comparisonYear').value)));
        document.getElementById('updateExpenseBreakdown').addEventListener('click', () => generateCharts('breakdown', 'monthly', parseInt(document.getElementById('breakdownYear').value), document.getElementById('breakdownMonth').value !== "" ? parseInt(document.getElementById('breakdownMonth').value) : null));

        document.getElementById('filterDates').addEventListener('click', function() {
    // Get the start and end dates
    var startDate = document.getElementById('startDate').value;
    var endDate = document.getElementById('endDate').value;

    // Check if both dates are provided
    if (startDate && endDate) {
        // Format the dates to make sure they are in the same format (YYYY-MM-DD)
        var formattedStartDate = new Date(startDate).getTime();
        var formattedEndDate = new Date(endDate).getTime();

        // Filter expenses based on date range
        var filteredExpenses = expenses.filter(function(expense) {
            var expenseDate = new Date(expense.date).getTime();
            return expenseDate >= formattedStartDate && expenseDate <= formattedEndDate;
        });

        // Update the table with filtered expenses
        updateExpenseTable(filteredExpenses);
    } else {
        alert("Please select both start and end dates.");
    }
});

// Function to update the table with filtered expenses
function updateExpenseTable(filteredExpenses) {
    var tableBody = document.getElementById('expenseTableBody');
    tableBody.innerHTML = ''; // Clear existing rows

    filteredExpenses.forEach(function(expense) {
        var row = document.createElement('tr');
        row.innerHTML = `
            <td>${expense.date}</td>
            <td>${expense.category}</td>
            <td>₹${expense.amount}</td>
        `;
        tableBody.appendChild(row);
    });
}

document.getElementById('filterIncomeDates').addEventListener('click', function() {
    // Get the start and end dates
    var startDate = document.getElementById('incomeStartDate').value;
    var endDate = document.getElementById('incomeEndDate').value;

    // Check if both dates are provided
    if (startDate && endDate) {
        // Format the dates to make sure they are in the same format (YYYY-MM-DD)
        var formattedStartDate = new Date(startDate).getTime();
        var formattedEndDate = new Date(endDate).getTime();

        // Filter income based on date range
        var filteredIncome = income.filter(function(inc) {
            var incomeDate = new Date(inc.date).getTime();
            return incomeDate >= formattedStartDate && incomeDate <= formattedEndDate;
        });

        // Update the table with filtered income
        updateIncomeTable(filteredIncome);
    } else {
        alert("Please select both start and end dates.");
    }
});

// Function to update the income table with filtered transactions
function updateIncomeTable(filteredIncome) {
    var tableBody = document.getElementById('incomeTableBody');
    tableBody.innerHTML = ''; // Clear existing rows

    filteredIncome.forEach(function(inc) {
        var row = document.createElement('tr');
        row.innerHTML = `
            <td>${inc.date}</td>
            <td>${inc.source}</td>
            <td>₹${inc.amount}</td>
        `;
        tableBody.appendChild(row);
    });
}

    </script>
    
    


    
</body>
</html>